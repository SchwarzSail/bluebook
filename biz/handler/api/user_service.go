// Code generated by hertz generator.

package api

import (
	api "bluebook/biz/model/api"
	"bluebook/biz/pack"
	"bluebook/pkg/errno"
	"bluebook/pkg/logger"
	utils "bluebook/pkg/util"
	service "bluebook/service/user"
	"context"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
)

// Register .
// @router book/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}
	l := service.NewUserService(ctx)
	err = l.Register(&req)
	if err != nil {
		logger.Errorf("user.Register failed, err: %v", err)
		pack.RespError(c, errno.ConvertErr(err))
		return
	}
	pack.RespSuccess(c)
}

// Login .
// @router user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}

	resp := new(api.LoginResponse)
	l := service.NewUserService(ctx)
	user, err := l.Login(&req)
	if err != nil {
		logger.Errorf("user.Login failed, err: %v", err)
		pack.RespError(c, errno.ConvertErr(err))
		return
	}

	token, err := utils.GenerateToken(strconv.Itoa(int(user.ID)), user.Username)
	if err != nil {
		logger.Errorf("user.Login failed, err: %v", err)
		pack.RespError(c, errno.ServiceErr)
		return
	}
	resp.User = pack.BuildUser(user)
	pack.RespDataWithUserToken(c, resp.User, token)
}

// Getinfo .
// @router book/user/info [GET]
func Getinfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetinfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamErr)
		return
	}

	return
}
